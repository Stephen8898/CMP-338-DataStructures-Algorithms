
import java.util.Random;

public class Driver implements DriverInterface {

	Random rand = new Random();
	
	@Override
	public Integer[] createArray(ArrayType arrayType, int arraySize) {
		
		Integer [] arrayNew = new Integer [arraySize];
		
		switch (arrayType) {
			case Equal : 
				for(int i = 0; i < arrayNew.length; i++)
					arrayNew[i] = arrayNew[0];
				break;
			case Random : 
				int randNum = rand.nextInt(1000);
				for (int i = 0; i < arrayNew.length; i++)
					arrayNew[i] = arrayNew[randNum];
				break;
			case Increasing : 
				for(int i= 0; i < arrayNew.length; i++)
					arrayNew[i] = arrayNew[i];
				break;
			case Decreasing :
				for(int i = arrayNew.length; i >= 0; i--)
					arrayNew[i] = arrayNew[i];
				break;
			case IncreasingAndRandom :
			/*
				for(int i = 0; i < arrayNew.length; i++)
					if() {
						
					} else {arrayNew[i] = arrayNew[i];}
				
			*/	
				
		}
		
		return arrayNew;
	}

	@Override
	public TestTimes runSort(SortType sortType, ArrayType arrayType, int arraySize, int numberOfTimes) {
		// TODO Auto-generated method stub
		
		switch (sortType) {
			case BubbleSort :
				BubbleSort bs = new BubbleSort();
				switch (arrayType) {
				case Increasing :
					for(int i = 0; i < numberOfTimes; i++)
						bs.sort(createArray(arrayType, arraySize));
					break;
				case Random : 
					for(int i = 0; i < numberOfTimes; i++)
						bs.sort(createArray(arrayType,arraySize));
					break;
				case Decreasing :
					for(int i = 0; i < numberOfTimes; i++)
						bs.sort(createArray(arrayType,arraySize));
					break;
				case Equal:
					for(int i = 0; i < numberOfTimes; i++)
						bs.sort(createArray(arrayType,arraySize));
					break;
				case IncreasingAndRandom:
					for(int i = 0; i < numberOfTimes; i++)
						bs.sort(createArray(arrayType,arraySize));
					break;
				}
				return bs;
				
			case InsertionSort: 
				InsertionSort is = new InsertionSort();
				switch (arrayType) {
				case Increasing:
					for(int i = 0; i < numberOfTimes; i++)
					is.sort(createArray(arrayType, arraySize));
					break;
				case Random:
					for(int i = 0; i < numberOfTimes; i++)
						is.sort(createArray(arrayType, arraySize));
					break;
				case Decreasing:
					for(int i = 0; i < numberOfTimes; i++)
						is.sort(createArray(arrayType, arraySize));
					break;
				case Equal:
					for(int i = 0; i < numberOfTimes; i++)
						is.sort(createArray(arrayType, arraySize));
					break;
				case IncreasingAndRandom:
					for(int i = 0; i < numberOfTimes; i++)
						is.sort(createArray(arrayType, arraySize));
					break;
				}
			return is;
				
			case SelectionSort:
				SelectionSort ss = new SelectionSort();
				switch (arrayType) {
				case Increasing:
					for(int i = 0; i < numberOfTimes; i++)
						ss.sort(createArray(arrayType,arraySize));
					break;
				case Random:
					for(int i = 0; i < numberOfTimes; i++)
						ss.sort(createArray(arrayType,arraySize));
					break;
				case Decreasing:
					for(int i = 0; i < numberOfTimes; i++)
						ss.sort(createArray(arrayType,arraySize));
					break;
				case Equal:
					for(int i = 0; i < numberOfTimes; i++)
						ss.sort(createArray(arrayType,arraySize));
					break;
				case IncreasingAndRandom:
					for(int i = 0; i < numberOfTimes; i++)
						ss.sort(createArray(arrayType,arraySize));
					break;
				}
				
				return ss;
		}
		
		
		return null;
		
	}

	
	public static void main(String[] args) {
		
		
		
		
	}
	
	
}

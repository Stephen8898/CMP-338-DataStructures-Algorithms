import java.util.Iterator;
import java.util.Vector;

public class ArrayBasedStack <E extends Comparable <? super E>>implements StackInterface<E> {
	
	Object[] array = new Object[10000]; 
	int first = -1;
	int last = -1;
	int size = 0;

	
	@Override
	public Iterator<E> iterator() {
		Vector<E> elements = new Vector<E>(array.length);
	
		int current = this.first;
		int count = 0;
		while (count < this.size) {
			elements.add((E) array[current]);
			current = this.incrementIndex(current);
			count++;
		}
		ElementIterator<E> elementIterator = new ElementIterator<>(elements);
		return elementIterator;
		
	}

	@Override
	public boolean isEmpty() {
		return (this.size == 0);
	}

	@Override
	public int size() {
		return this.size;
	}

	@Override
	public void push(E e) throws IllegalStateException, NullPointerException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public E peek() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E pop() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void clear() {
		this.size = 0;
		this.first = -1;
		this.last = -1;
	}

	private int incrementIndex(int index) {
		index++;
		if (index >= this.array.length) {
			index = 0;
		}
		return index;
	}

	
	private int decrementIndex(int index) {
		index--;
		if (index < 0) {
			index = this.array.length - 1;
		}
		return index;
	}
}

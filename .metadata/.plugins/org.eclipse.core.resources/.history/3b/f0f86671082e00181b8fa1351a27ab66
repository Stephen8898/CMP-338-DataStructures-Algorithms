import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

public class LinkedQueue<I> implements QueueInterface<String> {

	private	LinkedQueue<I> head;
	private LinkedQueue<I> tail;

	private int numberOfEntries;
	
	public LinkedQueue() {
		this.head = null;
		this.tail = null;
		this.numberOfEntries = 0;
	}
	@Override
	public Iterator<String> iterator() {

		Vector<String> elements = new Vector<String>();
		
		return null;
	}

	@Override
	public boolean isEmpty() {		
		return (this.numberOfEntries == 0);
	}

	@Override
	public int size() {
		return this.numberOfEntries;
	}

	@Override
	public void enqueue(String e) throws IllegalStateException, NullPointerException {
		

	}

	@Override
	public String peek() {
		if (this.isEmpty()) {
			
		}
		return null;
	}

	@Override
	public String dequeue() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String dequeue(int index) throws NoSuchElementException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void removeAll() {
		this.head = null;
		this.tail = null; 
		this.numberOfEntries = 0;
	}

}

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

public class LinkedQueue<E> implements QueueInterface<E> {

	private	Node<E> head;
	private Node<E> tail;

	private int numberOfEntries;
	
	@Override
	public Iterator<E> iterator() {

		Vector<E> elements = new Vector<E>();
		
		return null;
	}

	@Override
	public boolean isEmpty() {		
		return (this.head == null);
	}

	@Override
	public int size() {
		return this.numberOfEntries;
	}

	@Override
	public void enqueue(E e) throws IllegalStateException, NullPointerException {
		Node<E> newNode = new Node<E>(e);
		LinkedQueue<E> lq = new LinkedQueue<E>();
		if (e == null) {
			throw new NullPointerException("Unable to enque a null Object");
		} else if (this.numberOfEntries == lq.linkedSize(e)  ) {
			throw new IllegalStateException("List is full");
		}
		else if (this.isEmpty()) {
			this.head = null;
			this.tail = null;
		}else if (this.tail == null){
			//Node<E> Node = new Node<E>(e);
			this.head = newNode;}
			else {
				tail.setNext(newNode);
				newNode.setPrev(newNode);
			}
			
			this.tail = newNode;
			this.numberOfEntries++;
		}

		

	@Override
	public E peek() {
		if (this.isEmpty()) {
			return null;
		}else {
			
		}
		return null;
	}

	@Override
	public E dequeue() {
		// TODO Auto-generated method stub
		
		return null;
	}

	@Override
	public E dequeue(int index) throws NoSuchElementException {
		// TODO Auto-generated method stub
		if ((index > this.numberOfEntries) && (index < 0)) {
			throw new NoSuchElementException("This index does not contain an element");
		}//else if () {
			
		//}
		return null;
	}

	@Override
	public void removeAll() {
		this.head = null;
		this.tail = null; 
		this.numberOfEntries = 0;
	}
	
	private int linkedSize(E e) {
		Node<E> currNode = new Node<E>(e);
		int curIndex = 0;
		
		while(curIndex < this.numberOfEntries) {
			currNode = currNode.getNext();
			curIndex++;
		}
		return curIndex;
	}
}
import TestTimesInterface.MemoryUnits;
import TestTimesInterface.TimeUnits;

public class Driver implements DriverInterface {

	@Override
	public QueueInterface<String> createQueue(QueueType queueType, QueueTestType queueTestType) {
		// TODO Auto-generated method stub
		
		
		
		switch(queueType) {
			case ArrayBasedQueue:
				QueueInterface<String> qi = null;
					switch(queueTestType) {
					case Enqueue:
						qi = new  ArrayBasedQueue<String>();
						
						return qi;
					case Dequeue :
						ArrayBasedQueue<String> dequi = new  ArrayBasedQueue<String>();
						
						for(int i = 1; i <= 10000; i++) {
							dequi.enqueue("String " + i);
						}
						return dequi;
					case Iterate :
						ArrayBasedQueue<String> itr = new  ArrayBasedQueue<String>();
						for(int i = 1; i <= 10000; i++ ) {
							itr.enqueue("String " + i );
							
						}
						return  itr;
					
					}
			
				case LinkedQueue: 
				switch (queueTestType) {
				case Enqueue:
					qi = new LinkedQueue<String>();
					
					return qi;
					
				case Dequeue:
					LinkedQueue<String> ldeq = new LinkedQueue<String>();
					
						for(int i = 1; i<= 10000; i++) {
							ldeq.enqueue("String "+ i);
						}
					
					return ldeq;
					
					
					
				case Iterate:
					LinkedQueue<String> itr = new LinkedQueue<String>();
						
						for(int i = 1; i < 10000; i++) {
							itr.enqueue("String "+ i);
						}
					return itr;
					
					

				default:
					break;
				}
				
			
			}
		
		
		return null;
	}

	@Override
	public StackInterface<String> createStack(StackType stackType, StackTestType stackTestType) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TestTimes runQueueTestCase(QueueType queueType, QueueTestType queueTestType, int numberOfTimes) {
		// TODO Auto-generated method stub
		
		switch (queueType) {
			case ArrayBasedQueue:
				TestTimes t = new TestTimes() {{
				
				setTimeUnits(TimeUnits.MicroSeconds);
				setMemoryUnits(MemoryUnits.KiloBytes);
				}};
				
				for(int i = 0; i < numberOfTimes; i++) {
					long startTime = System.nanoTime();
					
					this.createQueue(queueType.ArrayBasedQueue, queueTestType);
					
					long endTime = System.nanoTime();
					long testTime = endTime - startTime;
					t.addTestTime(testTime);
				}
				
				return t;
				
			case LinkedQueue:
				TestTimes lt = new TestTimes() {{
					
					setTimeUnits(TimeUnits.MicroSeconds);
					setMemoryUnits(MemoryUnits.KiloBytes);
					}};
					
					for(int i = 0; i < numberOfTimes; i++) {
						long startTime = System.nanoTime();
						
						this.createQueue(queueType.LinkedQueue, queueTestType);
						
						long endTime = System.nanoTime();
						long testTime = endTime - startTime;
						lt.addTestTime(testTime);
					}
					
					return lt;
		}
		
		return null;
	}

	@Override
	public TestTimes runStackTestCase(StackType stackType, StackTestType stackTestType, int numberOfTimes) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	
	public static void main(String[] args) {
	
	}

}

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

public class LinkedQueue<E> implements QueueInterface<E> {

	private	LinkedQueue<E> head;
	private LinkedQueue<E> tail;

	private int numberOfEntries;
	
	public LinkedQueue() {
		this.head = null;
		this.tail = null;
		this.numberOfEntries = 0;
	}
	@Override
	public Iterator<E> iterator() {

		Vector<String> elements = new Vector<String>();
		
		return null;
	}

	@Override
	public boolean isEmpty() {		
		return (this.numberOfEntries == 0);
	}

	@Override
	public int size() {
		return this.numberOfEntries;
	}

	@Override
	public void enqueue(E e) throws IllegalStateException, NullPointerException {
		if (e == null) {
			throw new NullPointerException("Unable to enque a null Object");
		} 
			
		else if (this.isEmpty()) {
			this.head = null;
			this.tail = null;
			Node<E> newNode = new Node<E>(e);
		}else if() {
			
		}

	}

	@Override
	public E peek() {
		if (this.isEmpty()) {
			
		}
		return null;
	}

	@Override
	public E dequeue() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E dequeue(int index) throws NoSuchElementException {
		// TODO Auto-generated method stub
		if ((index > this.numberOfEntries) && (index < 0)) {
			throw new NoSuchElementException("This index does not contain an element");
		}else if () {
			
		}
		return null;
	}

	@Override
	public void removeAll() {
		this.head = null;
		this.tail = null; 
		this.numberOfEntries = 0;
	}
}